c
position
id
if id
c
position
id
position_was
position_was,
c
persisted?
position
c
new_record?
c
new_record?
c
self
elf
params
c
position
position_was
c
@state1.reload
@state1.relaod
@state1
c
@state
c
@state
c
@state
@state.update(state_params)
@state
state_params
c
@state
state
c
State.count
expect(response.body).to have_node(:position).with (State.count + 1)
expect(response.body).to have_node(:position).with State.count + 1
expect(response.body).to have_node(:position)
response.body
c
dd = JSON.parse response.body
c
dd.length
dd.lenght
dd = JSON.parse response.body
JSON.parse response.body.to_a.size
JSON.parse response.body.size.to_i
JSON.parse response.body.size
JSON.parse response.body
JSON.parse response.body.length
JSON.parse response.body.lenght
JSON.parse response.body.length
JSON.parse response.body
response.body
c
current_api_v1_user.role
current_api_v1_user
c
user.skip_confirmation!
user
c
response.status
response.body
